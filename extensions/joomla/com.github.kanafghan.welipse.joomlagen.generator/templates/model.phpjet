<%@jet 
	package="com.github.kanafghan.welipse.joomlagen.model"
	class="GenJModel"
	skeleton="skeletons/GenModelSkeleton.java"
%>
<% 
	initialize(argument);
	String modelName = getModelName();
	String listVar = modelName.toLowerCase() +"List";
%>
<?php
// No direct access to this file
defined('_JEXEC') or die('Restricted access');
 
// import Joomla model library
jimport('joomla.application.component.<%= getType().toLowerCase() %>');
 
/**
 * <%= modelName %> Model
 */
class <%= getComponentName() %>Model<%= getName() %> extends J<%= getType() %>
{ 
<% if (!context.isBackEndModel()) { %>
    /**
     * @var array <%= listVar %>
     */
    protected $<%= listVar %>;
<% } %>

    /**
     * (non-PHPdoc)
     * @see JModel::getTable()
     */
    public function getTable($type = '<%= modelName %>', $prefix = '<%= getComponentName() %>Table', $config = array()) 
    {
        return JTable::getInstance($type, $prefix, $config);
    }
    
<% if (!context.isBackEndModel()) { %>
    /**
     * Retrieve and return an instance of <%= modelName %>
     *
     * @param  int    The id of the instance to be retrieved
     * @return object The instance of <%= modelName %>
     */
    public function get<%= modelName %>($id = 1) 
    {
        if (!is_array($this-><%= listVar %>))
        {
            $this-><%= listVar %> = array();
        }

        if (!isset($this-><%= listVar %>[$id])) 
        {
            // request the selected id
            $jinput = JFactory::getApplication()->input;
            $id = $jinput->get('id', $id, 'INT');

            // Get an instance of the table corresponding to this model
            $table = $this->getTable();

            // Load the message
            $table->load($id);

            // Assign the instance
            $this-><%= listVar %>[$id] = JArrayHelper::toObject($table->getProperties());
        }

        return $this-><%= listVar %>[$id];
    }
<% } %>

<% if (isListBasedModel()) { %>
    /**
     * (non-PHPdoc)
     * @see JModelList::getListQuery()
     */
    protected function getListQuery()
    {
        $db = $this->getDbo();
        $query = $db->getQuery(true);

        $query->select('a.*');
        $query->from('<%= getTableName() %> AS a');

        return $query;
    }
<%}%>

<% if (isFormBasedModel()) { %>
	/**
	 * (non-PHPdoc)
	 * @see JModelForm::getForm()
	 */
	public function getForm($data = array(), $loadData = true)
	{		
		// Get the form.
		$form = $this->loadForm('<%= getComponent() %>.<%= modelName.toLowerCase() %>', '<%= modelName.toLowerCase() %>', array('control' => 'jform', 'load_data' => $loadData));
		if (empty($form))
		{
			return false;
		}

		return $form;
	}
	
	/**
	 * (non-PHPdoc)
	 * @see JModelForm::loadFormData()
	 */	
	protected function loadFormData()
	{
		$app = JFactory::getApplication();
		$input = $app->input;
		
		// Check the session for previously entered form data.
		$data = $app->getUserState('<%= getComponent() %>.edit.<%= modelName.toLowerCase() %>.data', array());

		if (empty($data))
		{
			$data = $this->getItem();
		}

		return $data;
	}
<% } %>
 
<% 
	for(EOperation operation: getOperations()) { 
		String returnType = getOperationType(operation);
		String operationName = operation.getName();
%>
    /**
     * <!-- user-docs-start -->
     * <!-- user-docs-end -->
     <% 
     		for (EParameter parameter : operation.getEParameters()) { 
     %>     
     * @param	<%= parameter.getEType().getName().toLowerCase() %> $<%= parameter.getName().toLowerCase() %>
     <% 	} %>
     * @return <%= returnType %>
     */
    public function <%= operationName %>(<%= generateOperationParameters(operation) %>) 
    {
    	//TODO Auto-generated function needs implementation
    	<%= generateOperationReturnStatement(operation) %>
    }	
<% 
	} 
%>    
}