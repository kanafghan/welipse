[comment encoding = UTF-8 /]
[module genModel('http://github.com/kanafghan/welipse/joomlagen/1.0', 'http://github.com/kanafghan/welipse/webdsl/1.0', 'http://www.eclipse.org/emf/2002/Ecore')]

[import com::github::kanafghan::welipse::joomlagen::generator::common::UtilsServices /]

[template public generateModel(model : GenClass, genModel : JoomlaGenModel)]
[comment @main/]
[file (model.itemMVCName.toLower().concat('.php'), false, 'UTF-8')]
<?php
// No direct access to this file
defined('_JEXEC') or die('Restricted access');
 
// import Joomla model library
jimport('joomla.application.component.model');
 
/**
 * [model.itemMVCName.toUpperFirst()/] Model
 */
class [genModel.extensionName.toUpperFirst()/]Model[model.itemMVCName.toUpperFirst()/] extends JModel
{
[for (feature : GenFeature | model.genFeatures)]
[if (feature.oclIsKindOf(GenAttribute))]
 	public $[feature.name/];
[/if]
[/for]

    /**
     * (non-PHPdoc)
     * @see JModel::__construct()
     */
    public function __construct($config = array())
    {
        parent::__construct($config);

        if (array_key_exists('requestVar', $config))
        {
            $this->initialize($config[ '[' /]'requestVar'[ ']' /] );
        }
        if (array_key_exists('id', $config))
        {
            $this->initialize(null, $config[ '[' /]'id'[ ']' /] );
        }
    }

    public function initialize($var, $id = 0) 
    {
        if ($var) 
        {
            // load the row based on the request
            $jinput = JFactory::getApplication()->input;
            $id = $jinput->get($var, 1, 'INT');
        }

        // Get a TablePlayers instance
        $table = $this->getTable();

        // Load the row
        $table->load($id);

        // Initialize
        foreach ($table->getProperties() as $key => $value)
        {
            $this->$key = $value;
        }
    }

    /**
     * (non-PHPdoc)
     * @see JModel::getTable()
     */
    public function getTable($type = '[model.databaseTableName.toUpperFirst()/]', $prefix = '[getComponentName(genModel)/]Table', $config = array()) 
    {
        return JTable::getInstance($type, $prefix, $config);
    }

[for (feature : GenFeature | model.genFeatures)]
[if (feature.oclIsKindOf(GenReference))]
[let reference : GenReference = feature.oclAsType(GenReference)]
	/**
     * Retrieve and return instance(s) of [reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]
     *
     * @param  int    The id of the instance to be retrieved
     * @return object The instance of [reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]
     */
    public function get[reference.name.toUpperFirst()/]([if (not reference.ecoreReference.oclAsType(EReference).derived and not reference.many)]$id = 0[/if]) 
    {
	[if (reference.ecoreReference.oclAsType(EReference).derived)]
		[protected ('Implementation of reference.name')]
		//TODO Auto-generated function needs implementation 
		[/protected]
	[else]
		if (!isset($this->[reference.name/]Instance[if (reference.many)]s[/if])) 
        {
			if (isset($this->[reference.name/])) 
			{
				$this->[reference.name/]Instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $this->[reference.name/]));
			} else {
	            $ids = array();
	            $this->[reference.name/]Instance[if (reference.many)]s = array()[else] = null[/if];
	            $db = $this->getDbo();
	            $query = $db->getQuery(true);
	
	            $query->select('a.id');
	            $query->from('[genModel.databaseTablePrefix.concat(reference.type.oclAsType(GenClass).databaseTableName)/] AS a');
	  		[if (reference.manyToMany)]
				$query->join('LEFT', '[genModel.getAssociationTableName(reference.genClass, reference.type.oclAsType(GenClass))/] AS b ON b.[reference.name/] = a.id');
				$query->join('LEFT', '[genModel.databaseTablePrefix.concat(model.databaseTableName)/] AS c ON c.id = b.[reference.opposite.name/]');
				$query->where('c.id = '. (int) $this->id);
			[else]
				$query->join('LEFT', '[genModel.databaseTablePrefix.concat(model.databaseTableName)/] AS b ON b.id = a.[reference.name/]');
	            $query->where('b.id = '. (int) $this->id);
			[/if]
	
	            $db->setQuery($query);
	            try {
	                $ids = $db->loadObjectList();
	            } catch(JDatabaseException $e) {
	                $this->setError($e->getMessage);
	                return false;
	            }
			[if (reference.many)]
	            foreach ($ids as $obj) {
	                $instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $obj->id));
	                array_push($this->[reference.name/]Instances, $instance);
	            }
			[else]
				$this->[reference.name/]Instance = JModel::getInstance('[reference.type.oclAsType(GenClass).itemMVCName.toUpperFirst()/]', '[genModel.extensionName.toUpperFirst()/]Model', $config = array('id' => $ids[ '[' /]0[ ']' /]->id));
			[/if]
			}
		}
		
        return $this->[reference.name/]Instance[if (reference.many)]s[/if];
	[/if]
    }
[/let]
[/if]

[/for]

[for (operation : GenOperation | model.genOperations)]
    /**
     * <!-- user-docs-start -->
     * <!-- user-docs-end -->
[for (parameter : GenParameter | operation.genParameters)]
     * @param	[parameter.ecoreParameter.oclAsType(EParameter).eType/] $[parameter.ecoreParameter.oclAsType(EParameter).name/]
[/for]
     * @return [operation.ecoreOperation.oclAsType(EOperation).eType.name/]
     */
    public function [operation.ecoreOperation.oclAsType(EOperation).name/]([generateOperationParameters(operation)/]) 
    {
		[protected ('Implementation of operation.name')]			
    	//TODO Auto-generated function needs implementation
    	[generateOperationReturnStatement(operation)/]
		[/protected]
    }
[/for]
}
[/file]
[/template]

[template public generateOperationParameters (operation : GenOperation) post (trim())]
[operation.genParameters.generateParameter()->sep(',')/]
[/template]

[template public generateOperationReturnStatement (operation : GenOperation) post (trim())]
return [if (operation.ecoreOperation.oclAsType(EOperation).upperBound = -1)]array()[else][if (operation.ecoreOperation.oclAsType(EOperation).eType.oclIsKindOf(EInt))]0[elseif (operation.ecoreOperation.oclAsType(EOperation).eType.oclIsKindOf(EBoolean))]false[else]''[/if][/if];
[/template]

[template public generateParameter (parameter : GenParameter) ]
$[parameter.ecoreParameter.oclAsType(EParameter).name/]
[/template]